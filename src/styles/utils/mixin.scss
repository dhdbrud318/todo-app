@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    } @else {
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }

      @media screen and (max-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

@mixin flex($direction: row, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  gap: $gap;
  place-items: center;
}

@mixin grid($gap: 0) {
  display: grid;
  gap: $gap;
}

@mixin positionRelative() {
  position: relative;
}

@mixin elebase($type: none, $padding: 0 0 0 4em, $width: 100%) {
  @include themify() {
    background-color: themified(main-ele-bg);
  }

  width: $width;
  height: $input-height;
  padding: $padding;
  @if $type == input {
    cursor: auto;
  } @else if $type == btn {
    cursor: pointer;
  }
}

@mixin btn($weight: #{$fw-400}, $default: main-ele-txt, $hover, $active: none) {
  font-weight: $weight;
  cursor: pointer;
  transition: color ease-in 0.2s;

  @include themify() {
    color: themified($default);

    &:hover {
      color: themified($hover);
    }

    &:active,
    &:focus {
      @if $active == blue {
        color: $primary-blue;
      } @else {
        color: themfied($active);
      }
    }
  }
}
