@mixin background($path) {
  background-image: url($path);
  background-repeat: no-repeat;
  position: center;
  size: cover;
}

@mixin themify() {
  @each $theme, $map in $themes {
    .theme--#{$theme} & {
      $theme-map: () !global;
      @each $key, $submap in $map {
        $value: map-get(map-get($themes, $theme), "#{$key}");
        $theme-map: map-merge(
          $theme-map,
          (
            $key: $value,
          )
        ) !global;
      }
      @content;
      $theme-map: null !global;
    }
  }
}

@function themed($key) {
  @return map-get($theme-map, $key);
}

@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {
  @each $fs-breakpoint, $fs-font-size in $fs-map {
    @if $fs-breakpoint == null {
      font-size: $fs-font-size;
    } @else {
      @if map-has-key($fs-breakpoints, $fs-breakpoint) {
        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
      }

      @media screen and (max-width: $fs-breakpoint) {
        font-size: $fs-font-size;
      }
    }
  }
}

@mixin flex($direction: row, $gap: 0) {
  display: flex;
  flex-direction: $direction;
  gap: $gap;
  place-items: center;
}

@mixin grid($gap: 0) {
  display: grid;
  gap: $gap;
}

@mixin inputcontainer() {
  position: relative;
}

@mixin elebase(
  $type: none,
  $background: #{$main-ele-bg},
  $padding: 0 0 0 4em,
  $width: 100%
) {
  background-color: $background;
  width: $width;
  height: $input-height;
  padding: $padding;
  @if $type == input {
    cursor: auto;
  } @else if $type == btn {
    cursor: pointer;
  }
}

@mixin btn(
  $color: #{$main-ele-txt},
  $weight: #{$fw-400},
  $hover,
  $active: #{$main-ele-txt}
) {
  color: $color;
  font-weight: $weight;
  cursor: pointer;
  transition: color ease-in 0.2s;

  &:hover {
    color: $hover;
  }

  &:focus,
  &:active {
    color: $active;
  }
}
